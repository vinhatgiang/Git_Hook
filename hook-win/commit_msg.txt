@echo off
setlocal enabledelayedexpansion

REM Git Hook: commit-msg
REM Platform: Windows
REM Purpose: Validate commit message format and rules

REM Function to show Windows dialog
set "SHOW_DIALOG=powershell -WindowStyle Hidden -Command "Add-Type -AssemblyName System.Windows.Forms; [System.Windows.Forms.MessageBox]::Show"

REM Get commit message file
set "COMMIT_MSG_FILE=%1"
if not exist "%COMMIT_MSG_FILE%" (
    echo Error: Commit message file not found
    exit /b 1
)

REM Read commit message and clean it
set "CLEAN_MSG="
for /f "usebackq delims=" %%i in ("%COMMIT_MSG_FILE%") do (
    set "line=%%i"
    if "!line:~0,1!" neq "#" if "!line!" neq "" (
        if not defined CLEAN_MSG set "CLEAN_MSG=!line!"
    )
)

REM Check if message is empty
if not defined CLEAN_MSG (
    echo.
    echo ‚ùå COMMIT MESSAGE ERROR
    echo Commit message cannot be empty.
    
    %SHOW_DIALOG%('Commit message cannot be empty.\n\nPlease provide a descriptive commit message.', 'Empty Commit Message', 'OK', 'Error')
    
    exit /b 1
)

REM Get message length
set "msg_length=0"
set "temp_msg=!CLEAN_MSG!"
:count_loop
if defined temp_msg (
    set "temp_msg=!temp_msg:~1!"
    set /a msg_length+=1
    goto count_loop
)

REM Check minimum length (10 characters)
if !msg_length! lss 10 (
    echo.
    echo ‚ùå COMMIT MESSAGE TOO SHORT
    echo Commit message must be at least 10 characters long.
    echo Current message: '!CLEAN_MSG!' ^(!msg_length! characters^)
    echo.
    echo üìã Commit Message Rules:
    echo ‚Ä¢ Minimum 10 characters
    echo ‚Ä¢ Start with capital letter
    echo ‚Ä¢ Use present tense ^(e.g., 'Add feature' not 'Added feature'^)
    echo ‚Ä¢ Be descriptive and clear
    echo ‚Ä¢ Use imperative mood
    echo.
    echo ‚úÖ Good examples:
    echo ‚Ä¢ Add user authentication system
    echo ‚Ä¢ Fix memory leak in data processor
    echo ‚Ä¢ Update API documentation
    echo ‚Ä¢ Refactor database connection logic
    
    %SHOW_DIALOG%('Commit message must be at least 10 characters long.\n\nRules:\n‚Ä¢ Minimum 10 characters\n‚Ä¢ Start with capital letter\n‚Ä¢ Use present tense\n‚Ä¢ Be descriptive\n\nCurrent: !CLEAN_MSG! (!msg_length! chars)', 'Commit Message Too Short', 'OK', 'Error')
    
    exit /b 1
)

REM Check maximum length warning (72 characters for first line)
if !msg_length! gtr 72 (
    echo.
    echo ‚ö†Ô∏è  COMMIT MESSAGE WARNING
    echo First line is longer than 72 characters ^(!msg_length! characters^).
    echo Consider keeping the first line under 72 characters for better readability.
    echo Current message: '!CLEAN_MSG!'
    echo.
    echo üí° Tip: Use additional lines for detailed explanation
)

REM Check if message starts with capital letter
set "first_char=!CLEAN_MSG:~0,1!"
echo !first_char! | findstr /r "^[A-Z]$" >nul
if errorlevel 1 (
    echo.
    echo ‚ùå COMMIT MESSAGE FORMAT ERROR
    echo Commit message must start with a capital letter.
    echo Current message: '!CLEAN_MSG!'
    echo First character: '!first_char!'
    
    %SHOW_DIALOG%('Commit message must start with a capital letter.\n\nCurrent: !CLEAN_MSG!', 'Invalid Message Format', 'OK', 'Error')
    
    exit /b 1
)

REM Check for common anti-patterns
echo !CLEAN_MSG! | findstr /i /c:"wip" /c:"temp" /c:"tmp" >nul
if not errorlevel 1 (
    echo.
    echo ‚ö†Ô∏è  TEMPORARY COMMIT DETECTED
    echo This appears to be a temporary/work-in-progress commit.
    echo Consider using a more descriptive message.
    echo Current message: '!CLEAN_MSG!'
)

REM Check for ending punctuation (should not end with period for subject line)
if "!CLEAN_MSG:~-1!"=="." (
    echo.
    echo ‚ö†Ô∏è  COMMIT MESSAGE STYLE
    echo Subject line should not end with a period.
    echo Current message: '!CLEAN_MSG!'
)

REM Check for past tense (common mistakes)
echo !CLEAN_MSG! | findstr /i /c:"added" /c:"fixed" /c:"updated" /c:"changed" /c:"removed" /c:"deleted" /c:"created" >nul
if not errorlevel 1 (
    echo.
    echo ‚ö†Ô∏è  COMMIT MESSAGE TENSE
    echo Consider using present tense/imperative mood.
    echo Use 'Add' instead of 'Added', 'Fix' instead of 'Fixed', etc.
    echo Current message: '!CLEAN_MSG!'
)

echo ‚úÖ Commit message validation passed
echo Message: '!CLEAN_MSG!' ^(!msg_length! characters^)
exit /b 0