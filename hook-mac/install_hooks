#!/bin/bash

# Script to install Git hooks
# Platform: macOS
# Purpose: Install and configure Git hooks with permissions

echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë        Git Hooks Installer           ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"

# Get the directory of this script
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Check if we're in a Git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚ùå ERROR: Not a Git repository"
    echo "Please run this script from a Git repository root"
    exit 1
fi

# Get the git hooks directory
HOOKS_DIR="$(git rev-parse --git-dir)/hooks"

# Create hooks directory if it doesn't exist
mkdir -p "$HOOKS_DIR"

# Check if all required hooks exist
MISSING_FILES=""
for hook in "pre-commit" "commit-msg" "pre-push" "pre-rebase"; do
    if [ ! -f "$SCRIPT_DIR/$hook" ]; then
        MISSING_FILES="$MISSING_FILES $hook"
    fi
done

if [ ! -z "$MISSING_FILES" ]; then
    echo "‚ùå ERROR: Missing required hook files:$MISSING_FILES"
    echo "Please ensure all hook files are present in $SCRIPT_DIR"
    exit 1
fi

# Create backup of existing hooks
if [ -d "$HOOKS_DIR" ] && [ "$(ls -A $HOOKS_DIR)" ]; then
    BACKUP_DIR="${HOOKS_DIR}-backup-$(date +%Y%m%d_%H%M%S)"
    echo "üì¶ Creating backup of existing hooks in $BACKUP_DIR..."
    mkdir -p "$BACKUP_DIR"
    mv "$HOOKS_DIR"/* "$BACKUP_DIR/"
fi

echo "üîß Installing Git hooks..."

# Install hooks and set permissions
FAILED=""
for hook in "pre-commit" "commit-msg" "pre-push" "pre-rebase"; do
    cp "$SCRIPT_DIR/$hook" "$HOOKS_DIR/$hook" 2>/dev/null || FAILED="$FAILED $hook"
    chmod +x "$HOOKS_DIR/$hook" 2>/dev/null || FAILED="$FAILED $hook(chmod)"
done

if [ ! -z "$FAILED" ]; then
    echo "‚ùå ERROR: Failed to install or set permissions for hooks:$FAILED"
    exit 1
fi

echo
echo "‚úÖ Git hooks installed successfully!"
echo
echo "üìã Installed hooks:"
echo "‚Ä¢ pre-commit  : Prevents commits to protected branches"
echo "‚Ä¢ commit-msg  : Enforces commit message format rules"
echo "‚Ä¢ pre-push    : Prevents pushes to protected branches"
echo "‚Ä¢ pre-rebase  : Prevents rebase operations"
echo
echo "üõ°Ô∏è  Active protection rules:"
echo "‚Ä¢ No direct commits to main/develop branches"
echo "‚Ä¢ No pushes to protected branches"
echo "‚Ä¢ No force pushes"
echo "‚Ä¢ No rebase operations"
echo "‚Ä¢ Commit message format validation"
echo
echo "üí° To create a new feature:"
echo "  git checkout -b feature/your-feature"
echo "  git add ."
echo '  git commit -m "type: your message"'
echo "  git push origin feature/your-feature"
echo
