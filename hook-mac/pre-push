#!/bin/bash

# Git Hook: pre-push
# Platform: macOS
# Purpose: Prevent pushes to main and develop branches, detect force pushes and rebases

# Function to show macOS dialog
show_dialog() {
    osascript -e "display dialog \"$1\" buttons {\"OK\"} default button \"OK\" with icon caution with title \"$2\""
}

# Function to detect any force push variants
detect_force_push() {
    local local_sha="$1"
    local remote_sha="$2"
    local remote_ref="$3"
    local remote_branch="${remote_ref#refs/heads/}"
    
    # Skip check for branch deletion (local_sha is all zeros)
    if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
        return 1
    fi
    
    # For new branches (remote_sha is all zeros), allow push
    if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
        return 1  # New branch is OK
    fi
    
    # Check if this is a fast-forward push
    # If remote commit is NOT reachable from local commit, it's non-fast-forward
    # This catches --force, --force-with-lease, and + prefix syntax
    if ! git merge-base --is-ancestor "$remote_sha" "$local_sha" 2>/dev/null; then
        return 0  # Non-fast-forward push detected (any force variant)
    fi
    
    return 1  # Fast-forward push is OK
}

# Function to detect force push by checking command line arguments
detect_force_by_cmdline() {
    # Check if any git push process contains force-related flags
    # This catches --force-if-includes and other force variants that might not show up in refs
    
    if pgrep -f "git.*push.*(--force|--force-with-lease|--force-if-includes|\+.*)" > /dev/null 2>&1; then
        return 0  # Force-related flags detected in command line
    fi
    
    # Check parent process command line (more reliable method)
    local parent_pid="$$"
    while [ "$parent_pid" != "1" ] && [ "$parent_pid" != "" ]; do
        if ps -p "$parent_pid" -o command= | grep -q "git.*push.*(--force|--force-with-lease|--force-if-includes|\+.*)" 2>/dev/null; then
            return 0  # Force detected in parent process
        fi
        parent_pid=$(ps -p "$parent_pid" -o ppid= | tr -d ' ')
    done
    
    return 1  # No force flags detected
}

# Check for rebase in commit history being pushed
check_for_rebase_in_history() {
    local local_sha="$1"
    local remote_sha="$2"
    
    # Disable rebase detection for now as it has false positives
    # TODO: Implement more accurate rebase detection if needed
    return 1
}

# Read push information from stdin and process each line
while read local_ref local_sha remote_ref remote_sha; do
    # Extract branch name from remote ref (refs/heads/branch-name)
    if [[ "$remote_ref" =~ ^refs/heads/ ]]; then
        remote_branch=${remote_ref#refs/heads/}
        
        # Check for force push by analyzing refs (catches most force pushes)
        if detect_force_push "$local_sha" "$remote_sha" "$remote_ref"; then
            echo
            echo "FORCE PUSH BLOCKED"
            echo "Force push (--force, --force-with-lease, + prefix) is not allowed."
            echo "This action is prohibited."
            
            show_dialog "Force push blocked.\n\nAll force push variants are prohibited." "Force Push Blocked"
            
            exit 1
        fi
        
        # Additional check for force flags in command line (catches --force-if-includes)
        if detect_force_by_cmdline; then
            echo
            echo "FORCE PUSH BLOCKED"
            echo "Force push (--force-if-includes or other variants) is not allowed."
            echo "This action is prohibited."
            
            show_dialog "Force push blocked.\n\nAll force push variants are prohibited." "Force Push Blocked"
            
            exit 1
        fi
        
        # Check for rebase in history
        if check_for_rebase_in_history "$local_sha" "$remote_sha"; then
            echo
            echo "REBASE DETECTED IN PUSH HISTORY"
            echo "The commits contain evidence of rebase operations."
            echo "Rebase is prohibited in this repository."
            echo "Push blocked."
            
            show_dialog "Rebase detected in push history.\n\nRebase is prohibited in this repository." "Push Blocked"
            
            exit 1
        fi
        
        # Check if pushing to protected branches
        if [ "$remote_branch" = "main" ]; then
            echo
            echo "PUSH TO MAIN BRANCH BLOCKED"
            echo "This action is not allowed."
            
            show_dialog "Push to main branch is blocked.\n\nThis action is not allowed." "Push Blocked"
            
            exit 1
        fi
        
        if [ "$remote_branch" = "develop" ]; then
            echo
            echo "PUSH TO DEVELOP BRANCH BLOCKED"
            echo "This action is not allowed."
            
            show_dialog "Push to develop branch is blocked.\n\nThis action is not allowed." "Push Blocked"
            
            exit 1
        fi
    fi
done

echo "Pre-push checks passed"
exit 0
