#!/bin/bash
# Git Hook: pre-push
# Platform: macOS
# Purpose: Prevent pushes to main and develop branches, detect force pushes and rebases

# Function to show macOS dialog
show_dialog() {
    osascript -e "display dialog \"$1\" buttons {\"OK\"} default button \"OK\" with icon caution with title \"$2\""
}

# Function to detect force push - FIXED VERSION
detect_force_push() {
    local local_sha="$1"
    local remote_sha="$2"
    local remote_ref="$3"
    local remote_branch="${remote_ref#refs/heads/}"
    
    # Skip check for branch deletion (local_sha is all zeros)
    if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
        return 1
    fi
    
    # For new branches (remote_sha is all zeros), allow push
    if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
        return 1  # New branch is OK
    fi
    
    # FIXED: Check if this is actually a force push by examining command line
    # The pre-push hook receives the actual push parameters, but we need to check
    # if --force or --force-with-lease was used
    
    # Method 1: Check if remote branch exists and is ahead
    # First, fetch the latest remote info quietly
    git fetch origin "$remote_branch" --quiet 2>/dev/null || return 1
    
    # Get the actual remote HEAD
    actual_remote_sha=$(git rev-parse "origin/$remote_branch" 2>/dev/null)
    
    # If we can't get remote SHA, assume it's safe
    if [ -z "$actual_remote_sha" ]; then
        return 1
    fi
    
    # Check if local branch contains all commits from remote
    # If not, this would require force push to succeed
    if ! git merge-base --is-ancestor "$actual_remote_sha" "$local_sha" 2>/dev/null; then
        # Additional check: see if this is a legitimate divergence
        # that would be rejected by Git anyway (not a force push scenario)
        
        # Check if the remote has commits that local doesn't have
        if git merge-base --is-ancestor "$local_sha" "$actual_remote_sha" 2>/dev/null; then
            # Remote is ahead of local - this would be rejected by Git
            # This is NOT a force push, it's a normal rejected push
            return 1
        fi
        
        # Both branches have diverged - this indicates potential force push
        return 0
    fi
    
    return 1  # Fast-forward push is OK
}

# Alternative method: Check for force push by examining git command (macOS version)
detect_force_push_alternative() {
    # Check parent processes for git push with --force flags
    # macOS version using ps command
    local parent_pid=$(ps -o ppid= -p $$ | tr -d ' ')
    local git_cmd=$(ps -o command= -p "$parent_pid" 2>/dev/null)
    
    if [[ "$git_cmd" =~ --force-with-lease ]] || [[ "$git_cmd" =~ --force ]] || [[ "$git_cmd" =~ -f[[:space:]] ]]; then
        return 0  # Force push detected
    fi
    
    return 1  # No force push
}

# Check for rebase in commit history being pushed
check_for_rebase_in_history() {
    local local_sha="$1"
    local remote_sha="$2"
    
    # Disable rebase detection for now as it has false positives
    # TODO: Implement more accurate rebase detection if needed
    return 1
}

# Read push information from stdin and process each line
while read local_ref local_sha remote_ref remote_sha; do
    # Extract branch name from remote ref (refs/heads/branch-name)
    if [[ "$remote_ref" =~ ^refs/heads/ ]]; then
        remote_branch=${remote_ref#refs/heads/}
        
        # Check if pushing to protected branches FIRST
        # This is more important than force push detection
        if [ "$remote_branch" = "main" ]; then
            echo
            echo "PUSH TO MAIN BRANCH BLOCKED"
            echo "This action is not allowed."
            
            show_dialog "Push to main branch is blocked.\\n\\nThis action is not allowed." "Push Blocked"
            
            exit 1
        fi
        
        if [ "$remote_branch" = "develop" ]; then
            echo
            echo "PUSH TO DEVELOP BRANCH BLOCKED"
            echo "This action is not allowed."
            
            show_dialog "Push to develop branch is blocked.\\n\\nThis action is not allowed." "Push Blocked"
            
            exit 1
        fi
        
        # Check for force push using alternative method (more reliable)
        if detect_force_push_alternative; then
            echo "Force push is prohibited."
            
            show_dialog "Force push is prohibited." "Prohibited"
            
            exit 1
        fi
        
        # Fallback: Check for force push using git analysis
        # Only if alternative method didn't detect anything
        if detect_force_push "$local_sha" "$remote_sha" "$remote_ref"; then
            echo "Force push is prohibited."
            
            show_dialog "Force push is prohibited." "Prohibited"
            
            exit 1
        fi
        
        # Check for rebase in history
        if check_for_rebase_in_history "$local_sha" "$remote_sha"; then
            echo
            echo "REBASE DETECTED IN PUSH HISTORY"
            echo "The commits contain evidence of rebase operations."
            echo "Rebase is prohibited in this repository."
            echo "Push blocked."
            
            show_dialog "Rebase detected in push history.\\n\\nRebase is prohibited in this repository." "Push Blocked"
            
            exit 1
        fi
    fi
done

echo "Pre-push checks passed"
exit 0
